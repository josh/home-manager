name: Nix

on:
  push:
  workflow_dispatch:

permissions:
  id-token: "write"
  contents: "read"

env:
  NIX_ABORT_ON_WARN: "1"

jobs:
  checks:
    name: Checks

    strategy:
      fail-fast: false
      matrix:
        system:
          - "aarch64-darwin"
          - "aarch64-linux"
          - "x86_64-linux"

    runs-on: ${{ endsWith(matrix.system, '-darwin') && 'macos-latest' || 'ubuntu-latest' }}
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4

      - if: matrix.system == 'aarch64-linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: |
            system = ${{ matrix.system }}
            accept-flake-config = true

      - uses: cachix/cachix-action@v15
        with:
          name: josh
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Check Nix flake inputs
        uses: DeterminateSystems/flake-checker-action@v9

      - name: Check flake
        run: |
          nix flake check

  flakes:
    name: Flakes

    strategy:
      fail-fast: false
      matrix:
        system:
          - "aarch64-linux"
          - "x86_64-linux"

    runs-on: ${{ endsWith(matrix.system, '-darwin') && 'macos-latest' || 'ubuntu-latest' }}
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4

      - if: matrix.system == 'aarch64-linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: |
            system = ${{ matrix.system }}
            accept-flake-config = true

      - uses: cachix/cachix-action@v15
        with:
          name: josh
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Build home-manager
        run: |
          nix run .#home-manager -- --version

      - name: Build home configuration
        run: |
          nix run .#home-manager -- build --flake ".#runner@${{ matrix.system }}" --no-out-link

      - name: Set cachix priority
        run: |
          nix-env --set-flag priority 0 cachix

      - name: Activate home configuration
        run: |
          nix run .#home-manager -- switch --flake ".#runner@${{ matrix.system }}" -b backup

      - name: Fastfetch
        run: fastfetch

  channels:
    name: Channels

    strategy:
      fail-fast: false
      matrix:
        system:
          - "x86_64-linux"

    runs-on: ${{ endsWith(matrix.system, '-darwin') && 'macos-latest' || 'ubuntu-latest' }}
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4

      - uses: DeterminateSystems/nix-installer-action@main

      - uses: cachix/cachix-action@v15
        with:
          name: josh
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Pin nixpkgs registry
        run: |
          nix registry remove nixpkgs
          rev="$(jq --raw-output '.nodes."nixpkgs".locked.rev' <flake.lock)"
          nix registry add nixpkgs "github:NixOS/nixpkgs/$rev"

      - name: Add channels
        run: |
          rev="$(jq --raw-output '.nodes."nixpkgs".locked.rev' <flake.lock)"
          nix-channel --add "https://github.com/NixOS/nixpkgs/archive/$rev.tar.gz" nixpkgs

          rev="$(jq --raw-output '.nodes."home-manager".locked.rev' <flake.lock)"
          nix-channel --add "https://github.com/nix-community/home-manager/archive/$rev.tar.gz" home-manager

      - name: Update channels
        run: nix-channel --update

      - name: List channels
        run: nix-channel --list

      - name: Install home-manager
        run: |
          nix-shell '<home-manager>' -A install

      - name: Build home configuration
        run: |
          home-manager build -f home.nix

      - name: Set cachix priority
        run: |
          nix-env --set-flag priority 0 cachix

      - name: Activate home configuration
        run: |
          home-manager switch -f home.nix -b backup

      - name: Fastfetch
        run: fastfetch
