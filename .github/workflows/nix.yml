name: Nix

on:
  push:
  workflow_dispatch:

jobs:
  flakes:
    name: Flakes
    runs-on: ubuntu-latest

    strategy:
      matrix:
        system: ["x86_64-linux", "aarch64-linux"]

    steps:
      - uses: actions/checkout@v4

      - if: matrix.system == 'aarch64-linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: |
            system = ${{ matrix.system }}

      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Check Nix flake inputs
        uses: DeterminateSystems/flake-checker-action@v8

      - name: Check flake
        run: |
          nix flake check

      - name: Build home-manager
        run: |
          nix run .#home-manager -- --version

      - name: Build home configuration
        run: |
          nix run .#home-manager -- build --flake ".#runner@${{ matrix.system }}" --no-out-link

      - name: Activate home configuration
        run: |
          nix run .#home-manager -- switch --flake ".#runner@${{ matrix.system }}" -b backup

      - name: Fastfetch
        run: fastfetch

      - name: Print top closure sizes
        run: |
          set -o pipefail
          result="$(nix build --print-out-paths '.#homeConfigurations."runner@${{ matrix.system }}".activationPackage')"
          nix path-info --recursive --closure-size "$result/home-path" --json | \
            jq --raw-output 'to_entries | sort_by(.value.closureSize) | reverse | map("\(.value.closureSize / 1024 / 1024 | floor) MB\t\(.value.path)") | .[:25] | .[]' | \
            tee "$GITHUB_STEP_SUMMARY"

  nixos:
    name: NixOS
    runs-on: ubuntu-latest

    strategy:
      matrix:
        system: ["x86_64-linux"]

    steps:
      - uses: actions/checkout@v4

      - uses: DeterminateSystems/nix-installer-action@main

      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Build NixOS
        run: |
          nix build .#nixosConfigurations.test-${{ matrix.system }}.config.system.build.toplevel

  channels:
    name: Channels
    runs-on: ubuntu-latest

    strategy:
      matrix:
        system: ["x86_64-linux"]

    steps:
      - uses: actions/checkout@v4

      - uses: DeterminateSystems/nix-installer-action@main

      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Add channels
        run: |
          rev="$(jq --raw-output '.nodes."home-manager".locked.rev' <flake.lock)"
          nix-channel --add "https://github.com/nix-community/home-manager/archive/$rev.tar.gz" home-manager

      - name: Update channels
        run: nix-channel --update

      - name: Install home-manager
        run: |
          nix-shell '<home-manager>' -A install

      - name: Build home configuration
        run: |
          home-manager build -f home.nix

      - name: Activate home configuration
        run: |
          home-manager switch -f home.nix -b backup

      - name: Fastfetch
        run: fastfetch
