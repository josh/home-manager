name: Nix

on:
  push:
  workflow_dispatch:

permissions:
  id-token: "write"
  contents: "read"

jobs:
  flakes:
    name: Flakes
    runs-on: ubuntu-latest

    strategy:
      matrix:
        system: ["x86_64-linux", "aarch64-linux"]

    steps:
      - name: Connect to Tailnet
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:github-actions

      - uses: actions/checkout@v4

      - if: matrix.system == 'aarch64-linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: |
            system = ${{ matrix.system }}

      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Check Nix flake inputs
        uses: DeterminateSystems/flake-checker-action@v8

      - name: Check flake
        run: |
          nix flake check

      - name: Build home-manager
        run: |
          nix run .#home-manager -- --version

      - name: Build home configuration
        run: |
          nix run .#home-manager -- build --flake ".#runner@${{ matrix.system }}" --no-out-link

      - name: Activate home configuration
        run: |
          nix run .#home-manager -- switch --flake ".#runner@${{ matrix.system }}" -b backup

      - name: Fastfetch
        run: fastfetch

      - name: Push to Nix Binary Cache
        run: |
          nix copy --to "$NIX_STORE_URI" ".#homeConfigurations.runner@${{ matrix.system }}.activationPackage"
        env:
          NIX_STORE_URI: ${{ secrets.NIX_STORE_URI }}

  nixos:
    name: NixOS
    runs-on: ubuntu-latest

    strategy:
      matrix:
        system: ["x86_64-linux"]

    steps:
      - name: Connect to Tailnet
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:github-actions

      - uses: actions/checkout@v4

      - uses: DeterminateSystems/nix-installer-action@main

      # - uses: DeterminateSystems/magic-nix-cache-action@main

      - uses: cachix/cachix-action@v15
        with:
          name: josh
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Build NixOS
        run: |
          nix build ".#nixosConfigurations.test-${{ matrix.system }}.config.system.build.toplevel"

      - name: Push to Nix Binary Cache
        run: |
          nix copy --to "$NIX_STORE_URI" ".#nixosConfigurations.test-${{ matrix.system }}.config.system.build.toplevel"
        env:
          NIX_STORE_URI: ${{ secrets.NIX_STORE_URI }}

  channels:
    name: Channels
    runs-on: ubuntu-latest

    strategy:
      matrix:
        system: ["x86_64-linux"]

    steps:
      - uses: actions/checkout@v4

      - uses: DeterminateSystems/nix-installer-action@main

      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Add channels
        run: |
          rev="$(jq --raw-output '.nodes."home-manager".locked.rev' <flake.lock)"
          nix-channel --add "https://github.com/nix-community/home-manager/archive/$rev.tar.gz" home-manager

      - name: Update channels
        run: nix-channel --update

      - name: Install home-manager
        run: |
          nix-shell '<home-manager>' -A install

      - name: Build home configuration
        run: |
          home-manager build -f home.nix

      - name: Activate home configuration
        run: |
          home-manager switch -f home.nix -b backup

      - name: Fastfetch
        run: fastfetch
